{
	"info": {
		"_postman_id": "87881ad4-dc4b-4c9a-831b-6ef55307d54e",
		"name": "Postman Testing Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28920661"
	},
	"item": [
		{
			"name": "0. Execution Order (example)",
			"item": [
				{
					"name": "Hello World",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Hello World >> Pre-request Script >> executed');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('Hello World >> Tests >> executed');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/hello",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"hello"
							]
						}
					},
					"response": []
				},
				{
					"name": "About",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('About >> Pre-request Script >> executed');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('About >> Tests >> executed');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/about",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"about"
							]
						},
						"description": "Contoh Endpoint mengembalikan HTML."
					},
					"response": []
				}
			],
			"description": "Testing Execution Order\n\nPre-Request Script & Tests",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('Execution Order Folder >> Pre-request Script >> executed')"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('Execution Order Folder >> Tests >> executed')"
						]
					}
				}
			]
		},
		{
			"name": "4. CRUD Flow",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 201 value', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body object should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test('response body should contain ID Kontak', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"    pm.expect(data).to.haveOwnProperty('contactId');\r",
									"    pm.expect(data.contactId).to.be.a('string');\r",
									"    pm.environment.set('createContactId', data.contactId);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{createContactName}}\",\r\n    \"number\": \"0888234235\",\r\n    \"email\": \"jack@mail.com\",\r\n    \"groups\": \"Family\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/contact",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"contact"
							]
						}
					},
					"response": []
				},
				{
					"name": "ReadAll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body object should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test('response body should contain contacts', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"    pm.expect(data).to.haveOwnProperty('contacts');\r",
									"    pm.expect(data.contacts).to.be.an('array');\r",
									"    pm.expect(data.contacts).lengthOf.at.least(1); \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/contact",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"contact"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test('response body object should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test('response body data should have a notes array and contain at least 1 item', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"\r",
									"    pm.expect(data).to.haveOwnProperty('contact');\r",
									"    pm.expect(data.contact).to.be.a('object');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/contact/{{createContactId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"contact",
								"{{createContactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body object should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test('response body should contain contact information', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"    pm.expect(data).to.haveOwnProperty('contact');\r",
									"    pm.expect(data.contact).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{createContactId}}\",\r\n    \"name\": \"{{createContactName}} Newest\",\r\n    \"number\": \"0888234235\",\r\n    \"email\": \"jackNew@mail.com\",\r\n    \"groups\": \"Family\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/contact",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"contact"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body object should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
									"    pm.expect(responseJson.message).to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test('when request deleted account', () => {\r",
									"    pm.sendRequest({\r",
									"        url: `${pm.environment.get('endpoint')}/contact/${pm.environment.get('createContactId')}`,\r",
									"        method: 'GET',\r",
									"        header: {}\r",
									"    }, (error, response) => {\r",
									"        pm.test('id should be not found', () => {\r",
									"            pm.expect(response.code).to.equals(404);\r",
									"            const responseJson = response.json();\r",
									"            pm.expect(responseJson.status).to.equals('fail');\r",
									"        });\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/contact/{{createContactId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"contact",
								"{{createContactId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Contoh untuk CRUD dengan use case sederhana: Daftar Kontak."
		},
		{
			"name": "1. Hello World",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/hello",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"hello"
					]
				},
				"description": "Contoh Endpoint mengembalikan Text."
			},
			"response": []
		},
		{
			"name": "2. About",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/about",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"about"
					]
				},
				"description": "Contoh Endpoint mengembalikan HTML."
			},
			"response": []
		},
		{
			"name": "3. Sapa (params)",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/sapa/jack",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"sapa",
						"jack"
					]
				},
				"description": "Testing untuk melewatkan URL Parameter"
			},
			"response": [
				{
					"name": "3. Sapa (params)",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/sapa/jack",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"sapa",
								"jack"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "html",
					"header": [
						{
							"key": "content-type",
							"value": "text/html; charset=utf-8"
						},
						{
							"key": "vary",
							"value": "origin"
						},
						{
							"key": "access-control-expose-headers",
							"value": "WWW-Authenticate,Server-Authorization"
						},
						{
							"key": "cache-control",
							"value": "no-cache"
						},
						{
							"key": "content-length",
							"value": "38"
						},
						{
							"key": "accept-ranges",
							"value": "bytes"
						},
						{
							"key": "Date",
							"value": "Thu, 30 Nov 2023 06:35:29 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "<h1>Sapa-sapa</h1>\n<h2>Hello, jack</h2>"
				},
				{
					"name": "3. Sapa (stranger)",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/sapa",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"sapa"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "html",
					"header": [
						{
							"key": "content-type",
							"value": "text/html; charset=utf-8"
						},
						{
							"key": "vary",
							"value": "origin"
						},
						{
							"key": "access-control-expose-headers",
							"value": "WWW-Authenticate,Server-Authorization"
						},
						{
							"key": "cache-control",
							"value": "no-cache"
						},
						{
							"key": "content-length",
							"value": "42"
						},
						{
							"key": "accept-ranges",
							"value": "bytes"
						},
						{
							"key": "Date",
							"value": "Thu, 30 Nov 2023 06:35:57 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "<h1>Sapa-sapa</h1>\n<h2>Hello, Stranger</h2>"
				}
			]
		}
	]
}